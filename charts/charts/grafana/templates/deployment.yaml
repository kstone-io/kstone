apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "grafana.fullname" . }}
  labels:
  {{- include "grafana.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
  {{- include "grafana.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
    {{- include "grafana.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      securityContext:
      {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - emptyDir: {}
          name: datasources
        - configMap:
            defaultMode: 420
            name: grafana-dashboard-import
          name: dashboard-import
        - emptyDir: {}
          name: dashboards
        - configMap:
            defaultMode: 420
            name: grafana
          name: config
        - emptyDir: {}
          name: storage
      containers:
        - args:
            - --namespace={{ .Release.Namespace }}
            - --flatten
            - --configmap-label=grafana/dashboards=default:/etc/grafana/dashboards
            - --configmap-label=grafana/datasource=default:/etc/grafana/provisioning/datasources
          image: ccr.ccs.tencentyun.com/tkeimages/configmap-update:v1.0.2
          imagePullPolicy: IfNotPresent
          name: dashboards-update
          resources: {}
          securityContext:
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /etc/grafana/dashboards
              name: dashboards
            - mountPath: /etc/grafana/provisioning/datasources
              name: datasources
        - env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  key: admin-user
                  name: grafana
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: admin-password
                  name: grafana
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          name: {{ .Chart.Name }}
          securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          ports:
            - containerPort: 80
              name: service
              protocol: TCP
            - containerPort: 3000
              name: grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {{- if eq .Values.global.env "production" }}
            {{- toYaml .Values.prodResources | nindent 12 }}
            {{- else }}
            {{- toYaml .Values.testResources | nindent 12 }}
            {{- end }}
          volumeMounts:
            - mountPath: /etc/grafana/provisioning/datasources
              name: datasources
            - mountPath: /etc/grafana/provisioning/dashboards
              name: dashboard-import
            - mountPath: /etc/grafana/dashboards
              name: dashboards
            - mountPath: /etc/grafana/grafana.ini
              name: config
              subPath: grafana.ini
            - mountPath: /var/lib/grafana
              name: storage
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
  {{- end }}
